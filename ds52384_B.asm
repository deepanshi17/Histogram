.ORIG x3000
BEGIN	AND R6, R6, #0
	AND R0, R0, #0			;INITIALIZATION
	AND R3, R3, #0
	LD R0, CASE1			;LOAD R0 WITH ADDRESS OF FIRST ENTRY
	LD R3, CASE2			;LOAD R3 WITH ADDRESS OF SECOND ENTRY

LOOP 	LDR R1, R0, #0			;R1 IS LOADED WITH VALUE OF FIRST ENTRY
	LD R7, BTMSK1			;BTMSK 1:xFF00
	AND R2, R1, R7			;R2 CONTAINS ISOLATED BITS [15:8] OF FIRST ENTRY
	BRnp WHILST			;WHILE THE FIRST ENTRY ID IS NOT 0, CHECK THE NEXT ENTRY
	BRz SORT1			;WHILE THE FIRST ENTRY IS 0, BEGIN HISTOGRAM

WHILST	LDR R4, R3, #0			;R4 CONTAINS THE VALUE AFTER THE FIRST ENTRY
	AND R5, R4, R7			;R5 CONTAINS ISOLATED BITS [15:8] OF THE SECOND ENTRY
	BRnp IF				;WHILE THE SECOND ENTRY'S ID IS NOT 0, COMPARE
	BRz CHECK			;REACHED END OF LIST, CLEAR AND CHECK NEXT SWAPS

CHECK	ADD R6, R6, #0
	BRz SORT1
	BRnp BEGIN

IF	LD R7, BTMSK2			;BTMSK2: X00FF
	AND R2, R1, R7			;R2 NOW CONTAINS ISOLATED BITS [7:0] OF THE FIRST ENTRY
	AND R5, R4, R7			;R5 NOW CONTAINS ISOLATED BITS [7:0] OF THE SECOND ENTRY
	NOT R5, R5			;SUBTRACT SECOND SCORE FROM FIRST
	ADD R5, R5, #1
	ADD R5, R5, R2
	BRn SWAP			;IF NEGATIVE, SWAP
	ADD R3, R3, #1			;IF POSITIVE OR ZERO, INCREMENT BOTH POINTERS
	ADD R0, R0, #1
	BRzp LOOP

SWAP	STR R1, R3, #0			;FIRST ENTRY IS STORED IN SECOND ENTRY'S PREVIOUS PLACE
	STR R4, R0, #0			;SECOND ENTRY IS STORED IN FIRST ENTRY'S PREVIOUS PLACE
	ADD R0, R0, #1			;INCREMENT ADDRESS OF FIRST ENTRY
	ADD R6, R6, #1			;ADD ONE TO SWAP COUNTER
	ADD R3, R3, #1			;INCREMENT ADDRESS OF SECOND ENTRY TO POINT DIRECTLY AFTER FIRST
	BRnzp LOOP			;SORT AGAIN STARTING FROM NEXT ENTRY







					;HISTOGRAM
SORT1	LD R6, BENCH
	LD R0, CASE1
	LD R5, HIST
	LD R4, OFFSET
	AND R7, R7, #0
	AND R2, R2, #0

SORT	LDR R1, R0, #0
	LD R3, BTMSK1
	AND R3, R1, R3
	BRz STRRES
	LD R3, BTMSK2
	AND R1, R1, R3
 	ADD R1, R1, R6
	BRn STRRES
	ADD R0, R0, #1
	ADD R7, R7, #1
	BRzp SORT

STRRES	STR R7, R5, #0
	ADD R6, R6, R4
	ADD R2, R2, #1
	AND R7, R7, #0
	ADD R5, R5, #-1
	ADD R3, R2, #-5
	BRn SORT
	LD R0, HIST
	LDR R1, R0, #0
	LD R2, A
	ADD R1, R2, R1
	STR R1, R0, #0
	ADD R0, R0, #-1
	LDR R1, R0, #0
	LD R2, C
	ADD R1, R2, R1
	STR R1, R0, #0
	ADD R0, R0, #-1
	LDR R1, R0, #0
	LD R2, B
	ADD R1, R2, R1
	STR R1, R0, #0
	ADD R0, R0, #-1
	LDR R1, R0, #0
	LD R2, D
	ADD R1, R2, R1
	STR R1, R0, #0
	ADD R0, R0, #-1
	LDR R1, R0, #0
	LD R2, F
	ADD R1, R2, R1
	STR R1, R0, #0
	
	AND R3, R3, #0
	LD R0, CASE1		;R0 POINTS TO FIRST ENTRY
STATS 	ADD R1, R0, #1		;R1 POINTS TO NEXT ENTRY
	LDR R2, R1, #0		
	LD R5, BTMSK1
	AND R2, R2, R5		;R2 HAS ID OF NEXT ENTRY
	ADD R2, R2, #0
	BRz COUNT
	ADD R3, R3, #1
	ADD R0, R0, #1
	BRnzp STATS
				;CALCULATE RANGE

COUNT	LD R0, CASE1		;R3 CONTAINS THE LENGTH OF THE ARRAY MINUS 1
	LD R5, BTMSK2
	LDR R1, R0, #0		;R1 CONTAINS VALUE OF ENTRY 1
	AND R6, R1, R5		;R6 CONTAINS SCORE OF ENTRY 1
	ADD R6, R6, R6
	ADD R6, R6, R6
	ADD R6, R6, R6
	ADD R6, R6, R6
	ADD R6, R6, R6
	ADD R6, R6, R6	
	ADD R6, R6, R6
	ADD R6, R6, R6
	LD R2, RANGE		;R6 CONTAINS HIGHEST VALUE IN BITS [15:8]
	ADD R2, R0, R3		;R2 CONTAINS THE ADDRESS OF THE LAST ENTRY
	LDR R4, R2, #0
	AND R5, R4, R5		;R5 CONTAINS SCORE OF LAST ENTRY
	LD R1, RANGE
	ADD R6, R6, R5		
	STR R6, R1, #0		;RANGE CONTAINS LOWEST VALUE IN BITS [7:0]

				;CALCULATE MEAN
	LD R0, CASE1
	LDR R1, R0, #0
	LDR R2, R0, #1
	LD R4, BTMSK2
	AND R6, R1, R4		;R6 CONTAINS FIRST ENTRY'S SCORE
	AND R2, R2, R4		;R2 CONTAINS NEXT ENTRY'S SCORE
	
SUM	ADD R2, R2, R6		;R2 NOW CONTAINS THE SUM OF THE NUMBERS PRECEDING IT
	ADD R0, R0, #1		;ENTRY 1 IS INCREMENTED
	LDR R1, R0, #1
	AND R6, R1, R4		;R6 NOW CONTAINS THE NEXT ENTRY'S SCORE
	LD R5, BTMSK1
	AND R7, R1, R5
	BRz DIVIDE
	BRnp SUM
	
	AND R6, R6, #0
	AND R5, R5, #0
DIVIDE	NOT R4, R3 		;R2 CONTAINS THE SUM OF ALL SCORES
	ADD R4, R4, #1		;R4 IS THE DIVISOR
	ADD R5, R4, R2
	BRp COUNTR
	BRnz STRMN
COUNTR	ADD R6, R6, #1		;R6 IS THE COUNTER
	BRnzp DIVIDE
	

	
STRMN	AND R0, R0, #0
	LD R0, MEAN
	STR R6, R0, #0

				;CALCULATE MEDIAN

	LD R0, CASE1		;R0 POINTS TO THE FIRST ADDRESS
	ADD R1, R0, R3 		;R1 POINTS TO THE LAST ADDRESS
	
MOVE	NOT R2, R1		
	ADD R2, R2, #1		;R2 CONTAINS NEGATIVE R1
	ADD R2, R2, R0
	BRn MID
	BRz STRMED 
	ADD R1, R1, #-1
	ADD R0, R0, #1
	BRnzp MOVE

MID	AND R6, R6, #0
	LDR R4, R1, #1
	LDR R5, R0, #-1
	NOT R7, R4
	ADD R7, R7, #1
	ADD R7, R7, R5
SUB	ADD R7, R7, -2
	BRn REM
	ADD R6, R6, #1
	BRnzp SUB
	
REM	ADD R6, R6, R4
	AND R0, R0, #0
	LD R0, MEDIAN
	STR R6, R0, #0

	HALT

STRMED	LDR R4, R1, #1
	LDR R5, R0, #-1
	ADD R0, R0, #1
	LDR R1, R0, #0
	LD R2, MEDIAN
	STR R1, R2, #0

	HALT

CASE1	.fill x4005
CASE2	.fill X4006
BTMSK1  .fill XFF00
BTMSK2  .fill X00FF
BENCH	.fill #-80
HIST	.fill X4004
OFFSET	.fill #20
F	.fill x4600
D	.fill x4400
C	.fill x4300
B	.fill x4200
A	.fill x4100
RANGE	.fill x6000
MEAN 	.fill x6001
MEDIAN	.fill x6002

	.END
	